//
// SPITEST.cpp : VC++ console application.
// this example project use port A of FT2232H to access SPI EEPROM 93C56
// we send 16 word data to 93C56 and read them back, user can see the test
// result in command mode.
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "ftdi/ftdi_usb2spi.h"
#include "ftdi/ftd2xx.h"
#include "common.h"
#include <QDebug>
#include <QMutex>
#include <QThread>

//declare parameters for 93C56
const BYTE SPIDATALENGTH = 11;//3 digit command + 8 digit address
const BYTE READ = '\xC0';//110xxxxx
const BYTE WRITE = '\xA0';//101xxxxx
const BYTE WREN = '\x98';//10011xxx
const BYTE ERAL = '\x90';//10010xxx

//declare for BAD command
const BYTE AA_ECHO_CMD_1 = '\xAA';
const BYTE AB_ECHO_CMD_2 = '\xAB';
const BYTE BAD_COMMAND_RESPONSE = '\xFA';

//declare for MPSSE command
const BYTE MSB_RISING_EDGE_CLOCK_BYTE_OUT = '\x10';
const BYTE MSB_FALLING_EDGE_CLOCK_BYTE_OUT = '\x11';
const BYTE MSB_RISING_EDGE_CLOCK_BIT_OUT = '\x12';
const BYTE MSB_FALLING_EDGE_CLOCK_BIT_OUT = '\x13';
const BYTE MSB_RISING_EDGE_CLOCK_BYTE_IN = '\x20';
const BYTE MSB_RISING_EDGE_CLOCK_BIT_IN = '\x22';
const BYTE MSB_FALLING_EDGE_CLOCK_BYTE_IN = '\x24';
const BYTE MSB_FALLING_EDGE_CLOCK_BIT_IN = '\x26';

const BYTE SEND_IMMEDIATE = '\x87';
const BYTE WAIT_ON_IO_HIGH = '\x88';
const BYTE WAIT_ON_IO_LOW = '\x89';

#define GPIO_MODE_CYCLE     2

FT_STATUS ftStatus; //Status defined in D2XX to indicate operation result
BYTE OutputBuffer0[462143]; //Buffer to hold MPSSE commands and data to be sent to FT2232H
BYTE OutputBuffer1[462143]; //Buffer to hold MPSSE commands and data to be sent to FT2232H
BYTE InputBuffer[65535]; //Buffer to hold Data bytes to be read from FT2232H
DWORD dwClockDivisor = 29; //Value of clock divisor, SCL Frequency = 60/((1+29)*2) (MHz) = 1Mhz
DWORD dwNumBytesToSend = 0; //Index of output buffer
DWORD dwNumBytesSent = 0, dwNumBytesRead = 0, dwNumInputBuffer = 0;
BYTE ByteDataRead;

FT_HANDLE ftdiHandle;

bool gathering = false;
bool handle_using = false;
bool buftog = false;
DWORD grlen = 0;
BYTE* obuf = OutputBuffer0;
DWORD FixedNumBytesToSend = 0;

bool write_prog(uint8_t reset)
{
  static bool write = false;

  if (reset == 0)
    write = true;
  else if (reset == 1)
    write = false;

  return write;
}

void setMutex(bool lock)
{
  static QMutex spiMutex(QMutex::NonRecursive);
  
  if (!lock) {
    // qDebug() << "spi Unlocked !!";
    spiMutex.unlock();
  }
  else {
    // qDebug() << "spi locked !!";
    while(!spiMutex.try_lock());
  }
}

void outbufsel()
{
  dwNumBytesToSend = 0;
  obuf = OutputBuffer1;
}

void cpybufcnt()
{
  obuf[dwNumBytesToSend++] = SEND_IMMEDIATE;
  FixedNumBytesToSend = dwNumBytesToSend;
  dwNumBytesToSend = 0;
  obuf = OutputBuffer0;
}

//this routine is used to enable SPI device
void SPI_CSEnable()
{
	for(int loop=0;loop<10;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {	
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x01';//set CS high, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}

//this routine is used to disable SPI device
void SPI_CSDisable()
{
  for(int loop=0;loop<10;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x09';//set CS, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}

//this routine is used to enable SPI device
void SPI_SCK_WHIGH(uint8_t lsb)
{
	for(int loop=0;loop<GPIO_MODE_CYCLE;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {	
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x01' | (lsb<<1);//set CS high, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}

void SPI_SCK_WLOW(uint8_t lsb)
{
	for(int loop=0;loop<GPIO_MODE_CYCLE;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {	
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x00' | (lsb<<1);//set CS high, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}


//this routine is used to enable SPI device
void SPI_SCK_RHIGH()
{
	for(int loop=0;loop<GPIO_MODE_CYCLE;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {	
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x01';//set CS high, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}

void SPI_SCK_RLOW()
{
	for(int loop=0;loop<GPIO_MODE_CYCLE;loop++) //one 0x80 command can keep 0.2us, do 5 times to stay in this situation for 1us
  {	
    obuf[dwNumBytesToSend++] = '\x80';//GPIO command for ADBUS
    obuf[dwNumBytesToSend++] = '\x00';//set CS high, MOSI and SCL low
    obuf[dwNumBytesToSend++] = '\x0b';//bit3:CS, bit2:MISO, bit1:MOSI, bit0:SCK
  }
}

void SPI_SCK_READ_BIT()
{
  obuf[dwNumBytesToSend++] = '\x81';//GPIO command for ADBUS
}


//this routine is used to initial SPI interface
BOOL SPI_Initial(FT_HANDLE ftHandle)
{
    DWORD dwCount;
    ftStatus = FT_ResetDevice(ftHandle); //Reset USB device
    
    //Purge USB receive buffer first by reading out all old data from FT2232H receive buffer
    ftStatus |= FT_GetQueueStatus(ftHandle, &dwNumInputBuffer); // Get the number of bytes in the FT2232H receive buffer
    if ((ftStatus == FT_OK) && (dwNumInputBuffer > 0))
        ftStatus |= FT_Read(ftHandle, InputBuffer, dwNumInputBuffer, &dwNumBytesRead); //Read out the data from FT2232H receive buffer
    ftStatus |= FT_SetUSBParameters(ftHandle, 462144, 462144); //Set USB request transfer size
    ftStatus |= FT_SetChars(ftHandle, false, 0, false, 0); //Disable event and error characters
    ftStatus |= FT_SetTimeouts(ftHandle, 3000, 3000); //Sets the read and write timeouts in 3 sec for the FT2232H
    ftStatus |= FT_SetLatencyTimer(ftHandle, 0); //Set the latency timer
    ftStatus |= FT_SetBitMode(ftHandle, 0x0, 0x00); //Reset controller
    ftStatus |= FT_SetBitMode(ftHandle, 0x0, 0x02); //Enable MPSSE mode
    
    if (ftStatus != FT_OK)
    {
        printf("fail on initialize FT2232H device ! \n");
        return false;
    }
    Sleep(50); // Wait 50ms for all the USB stuff to complete and work
    
    //////////////////////////////////////////////////////////////////
    // Synchronize the MPSSE interface by sending bad command ＆xAA＊
    //////////////////////////////////////////////////////////////////
    dwNumBytesToSend = 0;
    obuf[dwNumBytesToSend++] = '\xAA'; //Add BAD command ＆xAA＊
    ftStatus = FT_Write(ftHandle, obuf, dwNumBytesToSend, &dwNumBytesSent); // Send off the BAD commands
    dwNumBytesToSend = 0; //Clear output buffer
    
    do{
        ftStatus = FT_GetQueueStatus(ftHandle, &dwNumInputBuffer); // Get the number of bytes in the device input buffer
    }while ((dwNumInputBuffer == 0) && (ftStatus == FT_OK)); //or Timeout
    
    bool bCommandEchod = false;
    ftStatus = FT_Read(ftHandle, InputBuffer, dwNumInputBuffer, &dwNumBytesRead); //Read out the data from input buffer
    
    for (dwCount = 0; dwCount < (dwNumBytesRead - 1); dwCount++) //Check if Bad command and echo command received
    {
        if ((InputBuffer[dwCount] == BYTE('\xFA')) && (InputBuffer[dwCount+1] == BYTE('\xAA')))
        {
            bCommandEchod = true;
            break;
        }
    }
    
    if (bCommandEchod == false)
    {
        printf("fail to synchronize MPSSE with command '0xAA' \n");
        return false; /*Error, can＊t receive echo command , fail to synchronize MPSSE interface;*/
    }
    
    //////////////////////////////////////////////////////////////////
    // Synchronize the MPSSE interface by sending bad command ＆xAB＊
    //////////////////////////////////////////////////////////////////
    //dwNumBytesToSend = 0; //Clear output buffer
    obuf[dwNumBytesToSend++] = '\xAB'; //Send BAD command ＆xAB＊
    ftStatus = FT_Write(ftHandle, obuf, dwNumBytesToSend, &dwNumBytesSent); // Send off the BAD commands
    dwNumBytesToSend = 0; //Clear output buffer
    
    do{
        ftStatus = FT_GetQueueStatus(ftHandle, &dwNumInputBuffer); //Get the number of bytes in the device input buffer
    }while ((dwNumInputBuffer == 0) && (ftStatus == FT_OK)); //or Timeout
    
    bCommandEchod = false;
    ftStatus = FT_Read(ftHandle, InputBuffer, dwNumInputBuffer, &dwNumBytesRead); //Read out the data from input buffer
    for (dwCount = 0;dwCount < (dwNumBytesRead - 1); dwCount++) //Check if Bad command and echo command received
    {
        if ((InputBuffer[dwCount] == BYTE('\xFA')) && (InputBuffer[dwCount+1] == BYTE( '\xAB')))
        {
            bCommandEchod = true;
            break;
        }
    }
    
    if (bCommandEchod == false)
    {
        printf("fail to synchronize MPSSE with command '0xAB' \n");
        return false;
        /*Error, can't receive echo command , fail to synchronize MPSSE interface;*/
    }
    
    ////////////////////////////////////////////////////////////////////
    //Configure the MPSSE for SPI communication with EEPROM
    //////////////////////////////////////////////////////////////////
    obuf[dwNumBytesToSend++] = '\x8A'; //Ensure disable clock divide by 5 for 60Mhz master clock
    obuf[dwNumBytesToSend++] = '\x97'; //Ensure turn off adaptive clocking
    obuf[dwNumBytesToSend++] = '\x8D'; //disable 3 phase data clock
    ftStatus = FT_Write(ftHandle, obuf, dwNumBytesToSend, &dwNumBytesSent); // Send out the commands
    
    dwNumBytesToSend = 0; //Clear output buffer
    obuf[dwNumBytesToSend++] = '\x80'; //Command to set directions of lower 8 pins and force value on bits set as output
    obuf[dwNumBytesToSend++] = '\x09'; //Set SDA, SCL high, WP disabled by SK, DO at bit ＆＊, GPIOL0 at bit ＆＊
    obuf[dwNumBytesToSend++] = '\x0b'; //Set SK,DO,GPIOL0 pins as output with bit ＊＊, other pins as input with bit ＆＊
    
    // The SK clock frequency can be worked out by below algorithm with divide by 5 set as off
    // SK frequency = 60MHz /((1 + [(1 +0xValueH*256) OR 0xValueL])*2)
    obuf[dwNumBytesToSend++] = '\x86'; //Command to set clock divisor
    obuf[dwNumBytesToSend++] = BYTE(dwClockDivisor & '\xFF'); //Set 0xValueL of clock divisor
    obuf[dwNumBytesToSend++] = BYTE(dwClockDivisor >> 8); //Set 0xValueH of clock divisor
    
    ftStatus = FT_Write(ftHandle, obuf, dwNumBytesToSend, &dwNumBytesSent); // Send out the commands
    dwNumBytesToSend = 0; //Clear output buffer
    Sleep(20); //Delay for a while
    
    //Turn off loop back in case
    obuf[dwNumBytesToSend++] = '\x85'; //Command to turn off loop back of TDI/TDO connection
    
    ftStatus = FT_Write(ftHandle, obuf, dwNumBytesToSend, &dwNumBytesSent); // Send out the commands
    dwNumBytesToSend = 0; //Clear output buffer
    Sleep(30); //Delay for a while
    printf("SPI initial successful\n");
    
    return true;
}

//this routine is used to write one word data to a random address
bool spi_write_word(WORD address, WORD* bdata, WORD wlen)
{
	WORD bcnt = wlen*2-1;
    dwNumBytesSent=0;
    
    SPI_CSEnable();
    
    // set WRITE flag && send address
    obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
    obuf[dwNumBytesToSend++] = 1;
    obuf[dwNumBytesToSend++] = 0;
    obuf[dwNumBytesToSend++] = ((address >> 8) & 0x7f) & WRFLAG;
    obuf[dwNumBytesToSend++] = address & 0xff;
    
    //send data
    obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
    obuf[dwNumBytesToSend++] = (BYTE) (bcnt & 0xff);
    obuf[dwNumBytesToSend++] = (BYTE) (bcnt >> 8);
	
	for(int i=0; i<wlen; i++) {
		obuf[dwNumBytesToSend++] = (BYTE) (bdata[i] >> 8);//output high byte
		obuf[dwNumBytesToSend++] = (BYTE) (bdata[i] & 0xff);//output low byte
	}
    
	SPI_CSDisable();
	
    ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
	dwNumBytesToSend = 0; //Clear output buffer
    
    return ftStatus;
}

//this routine is used to read one word data from a random address
bool spi_read_word(WORD address, WORD* bdata, WORD wlen)
{
	WORD bcnt = wlen*2-1;
    dwNumBytesSent=0;
    SPI_CSEnable();
    
    // set READ flag && send address
    obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
    obuf[dwNumBytesToSend++] = 1;
    obuf[dwNumBytesToSend++] = 0;
    obuf[dwNumBytesToSend++] = ((address >> 8) & 0x7f) | RDFLAG;
    obuf[dwNumBytesToSend++] = address & 0xff;
    
    //read data
    obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_IN;
    obuf[dwNumBytesToSend++] = (BYTE) (bcnt & 0xff);
    obuf[dwNumBytesToSend++] = (BYTE) (bcnt >> 8);
    
    SPI_CSDisable();
    ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
    dwNumBytesToSend = 0; //Clear output buffer
	
    ftStatus = FT_Read(ftdiHandle, InputBuffer, (wlen<<1), &dwNumBytesRead);//Read 2 bytes from device receive buffer
	for(int i=0; i<wlen; i++) {
		int idx = i<<1;
		bdata[i] = (InputBuffer[idx] << 8) + InputBuffer[idx+1];
	}
    
    return ftStatus;
}

//this routine is used to write one word data to a random address
bool spi_write_byte(BYTE address, BYTE* bdata, WORD wlen)
{
  WORD bcnt = wlen-1;
  dwNumBytesSent=0;
  
  SPI_CSEnable();
  
  // set WRITE flag && send address
  obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
  obuf[dwNumBytesToSend++] = 0;
  obuf[dwNumBytesToSend++] = 0;
  obuf[dwNumBytesToSend++] = (address & 0x7f) & WRFLAG;
  
  //send data
  obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
  obuf[dwNumBytesToSend++] = (BYTE) (bcnt & 0xff);
  obuf[dwNumBytesToSend++] = (BYTE) (bcnt >> 8);
	
	for(int i=0; i<wlen; i++) {
		obuf[dwNumBytesToSend++] = (BYTE) (bdata[i] & 0xff);
	}
    
	SPI_CSDisable();
	
  ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
	dwNumBytesToSend = 0; //Clear output buffer
    
  return ftStatus;
}

//this routine is used to read one word data from a random address
bool spi_read_byte(BYTE address, BYTE* bdata, WORD wlen)
{
	WORD bcnt = wlen-1;
  dwNumBytesSent=0;
  SPI_CSEnable();
  
  // set READ flag && send address
  obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_OUT;
  obuf[dwNumBytesToSend++] = 0;
  obuf[dwNumBytesToSend++] = 0;
  obuf[dwNumBytesToSend++] = (address & 0x7f) | RDFLAG;
  
  //read data
  obuf[dwNumBytesToSend++] = MSB_FALLING_EDGE_CLOCK_BYTE_IN;
  obuf[dwNumBytesToSend++] = (BYTE) (bcnt & 0xff);
  obuf[dwNumBytesToSend++] = (BYTE) (bcnt >> 8);
  
  SPI_CSDisable();
  ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
  dwNumBytesToSend = 0; //Clear output buffer
	
  ftStatus = FT_Read(ftdiHandle, InputBuffer, wlen, &dwNumBytesRead);//Read 2 bytes from device receive buffer
  
	for(int i=0; i<wlen; i++) {
		int idx = i;
		bdata[i] = InputBuffer[idx];
	}
    
    return ftStatus;
}

//this routine is used to write one word data to a random address
bool gpio_write_byte(BYTE address, BYTE* bdata, WORD wlen)
{
	BYTE bcnt = wlen-1;
  dwNumBytesSent=0;
  BYTE cmd = (address & 0x7f) & WRFLAG;
  SPI_CSEnable();
  
  for (int i=0; i<8; i++) {
    SPI_SCK_WLOW((cmd >> (7-i)) & 0x01);
    SPI_SCK_WHIGH((cmd >> (7-i)) & 0x01);
  }
  
  for (int j=0; j<wlen; j++){
    BYTE wdat = bdata[j];
    for (int i=0; i<8; i++) {
      SPI_SCK_WLOW((wdat >> (7-i)) & 0x01);
      SPI_SCK_WHIGH((wdat >> (7-i)) & 0x01);
    }
  }
    
	SPI_CSDisable();
	
  if (!gathering) {
    ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
    dwNumBytesToSend = 0; //Clear output buffer
  }
  
  return ftStatus;
}

//this routine is used to read one word data from a random address
bool gpio_read_byte(BYTE address, BYTE* bdata, WORD wlen)
{
	BYTE bcnt = wlen-1;
  dwNumBytesSent = 0;
  BYTE cmd = (address & 0x7f) | RDFLAG;
  
  SPI_CSEnable();
  
  for (int i=0; i<8; i++) {
    SPI_SCK_WLOW((cmd >> (7-i)) & 0x01);
    SPI_SCK_WHIGH((cmd >> (7-i)) & 0x01);
  }
  
  for (int j=0; j<wlen; j++){
    for (int i=0; i<8; i++) {
      SPI_SCK_RLOW();
      SPI_SCK_READ_BIT();
      SPI_SCK_RHIGH();
    }
  }
  
  SPI_CSDisable();
  
  if (!gathering) {
    ftStatus = FT_Write(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
    dwNumBytesToSend = 0; //Clear output buffer
    
    ftStatus = FT_Read(ftdiHandle, InputBuffer, wlen*8, &dwNumBytesRead);//Read 2 bytes from device receive buffer
    
    for(int i=0; i<wlen; i++) {
      BYTE rddat = 0;
      for (int k=0; k<8; k++) {
        rddat |= (((InputBuffer[i*8+k] & 0x04) >> 2) << (7-k));
      }
      bdata[i] = rddat;
    }
  }
  
  return ftStatus;
}

void spi_queue_ctrl(bool onoff)
{
  gathering = onoff;
}

void spi_queue_write()
{
  static int wcnt = 0;
  DWORD RxQueueCount = 0;
  DWORD TXQueueCount = 0;
  DWORD stevt = 0;
  
  // int loop = 0;
  setMutex(true);
  FT_GetStatus(ftdiHandle, &RxQueueCount, &TXQueueCount, &stevt);
  setMutex(false);

  if (RxQueueCount > SPI_QUEUE_BUFF_LEN*4) {
    qDebug() <<  "[WR] return RxQueueCount : " << RxQueueCount << ",    FixedNumBytesToSend : " << FixedNumBytesToSend;
    return;
  }
  
  setMutex(true);
  FT_Write(ftdiHandle, OutputBuffer1, FixedNumBytesToSend, &dwNumBytesSent);
  qDebug() << "[WR] dwNumBytesSent : " << dwNumBytesSent << ",   FixedNumBytesToSend : " << FixedNumBytesToSend;

  setMutex(false);
}

BYTE* spi_queue_read()
{
  static int rcnt = 0;
  // static BYTE* prevbuf;
  // BYTE* returnval;
  DWORD RxQueueCount = 0;
  DWORD TXQueueCount = 0;
  DWORD stevt = 0;
  BYTE* rbuf = NULL;
  
  setMutex(true);
  FT_GetStatus(ftdiHandle, &RxQueueCount, &TXQueueCount, &stevt);
  setMutex(false);
  
  if (RxQueueCount < SPI_QUEUE_BUFF_LEN) {
    // qDebug() << "[RD] return RxQueueCount : " << R  xQueueCount;
    return NULL;
  }
  
  rbuf = new BYTE[SPI_QUEUE_BUFF_LEN];
  
  setMutex(true);
  FT_Read(ftdiHandle, rbuf, SPI_QUEUE_BUFF_LEN, &dwNumBytesRead);
  // qDebug() << "[RD] dwNumBytesRead : " << dwNumBytesRead << ",    RxQueueCount : " << RxQueueCount << " ,    pt : " << rbuf;
  setMutex(false);
  
  return rbuf;
}


void gpio_set_high_byte()
{
  obuf[dwNumBytesToSend++] = '\x82';
  obuf[dwNumBytesToSend++] = 0;
  obuf[dwNumBytesToSend++] = 0;
}

void gpio_b5_wait_low()
{
  obuf[dwNumBytesToSend++] = WAIT_ON_IO_LOW;
}

void gpio_b5_wait_high()
{
  obuf[dwNumBytesToSend++] = WAIT_ON_IO_HIGH;
}

bool gpio_read_bit(BYTE bitpos)
{
  obuf[dwNumBytesToSend++] = SEND_IMMEDIATE;
  
  // ftStatus = ft_uwrite(ftdiHandle, obuf, dwNumBytesToSend, &dwNumBytesSent);//send out MPSSE command to MPSSE engine
  dwNumBytesToSend = 0; //Clear output buffer
  // ftStatus = ft_uread(ftdiHandle, InputBuffer, 1, &dwNumBytesRead);//Read 2 bytes from device receive buffer
  
  return ((InputBuffer[0] >> bitpos) & 0x01)? true : false;
}

bool ftdi_connect()
{
    
    DWORD numDevs;
    FT_DEVICE_LIST_INFO_NODE *devInfo;
    ftStatus = FT_CreateDeviceInfoList(&numDevs);
    
    if (ftStatus == FT_OK)
        printf("Number of devices is %d\n",numDevs);
    else
        return FALSE;
    
    if (numDevs > 0) {
        // allocate storage for list based on numDevs
        devInfo = (FT_DEVICE_LIST_INFO_NODE*)malloc(sizeof(FT_DEVICE_LIST_INFO_NODE)*numDevs);
        // get the device information list
        ftStatus = FT_GetDeviceInfoList(devInfo,&numDevs);
        if (ftStatus == FT_OK) {
            // for (i = 0; i < numDevs; i++) {
                // printf("Dev %d:\n",i);
                // printf(" Flags=0x%x\n",devInfo[i].Flags);
                // printf(" Type=0x%x\n",devInfo[i].Type);
                // printf(" ID=0x%x\n",devInfo[i].ID);
                // printf(" LocId=0x%x\n",devInfo[i].LocId);
                // printf(" SerialNumber=%s\n",devInfo[i].SerialNumber);
                // printf(" Description=%s\n",devInfo[i].Description);
                // printf(" ftHandle=0x%x\n",(int)devInfo[i].ftHandle);
            // }
        }
    }
    else
        return FALSE;
    
    ftStatus = FT_Open(0, &ftdiHandle);
    if (ftStatus != FT_OK)
    {
        printf("Can't open FT2232H device! \n");
        return FALSE;
    }
    else // Port opened successfully
      printf("Successfully open FT2232H device! \n");
        
    if(SPI_Initial(ftdiHandle) == TRUE)
    {
        byte ReadByte = 0;
        
        //Purge USB received buffer first before read operation
        ftStatus = FT_GetQueueStatus(ftdiHandle, &dwNumInputBuffer); // Get the number of bytes in the device receive buffer
        if ((ftStatus == FT_OK) && (dwNumInputBuffer > 0))
            FT_Read(ftdiHandle, InputBuffer, dwNumInputBuffer, &dwNumBytesRead); //Read out all the data from receive buffer
        
    }
    
    return TRUE;
}

bool ftdi_disconnect()
{
  bool ft_ok = false;
	ft_ok =  FT_Close(ftdiHandle);
  ftdiHandle = NULL;
  return ft_ok;
}
